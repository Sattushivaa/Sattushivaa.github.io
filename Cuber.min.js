console.log('CUBER version 1.2.0 \ndeveloped by Satyam Bharti \ncontact : satyambhartijnv0@gmail.com');

class CUBER {
  cube(parent, parameters = {
    width: 200,
    height: 200,
    length: 200,
    perspective: 700,
    translations: [0, 0, 0]
  }) {
    let arr = [];
    for (let i = 0; i < 6; i++) {
      let a = document.createElement('div');
      arr.push(a);
    }

    let xTr = parameters.translations[0];
    let yTr = parameters.translations[1];
    let zTr = parameters.translations[2];

    let top = arr[0];
    let bottom = arr[1];
    let left = arr[2];
    let right = arr[3];
    let back = arr[4];
    let front = arr[5];

    top.style = `
    position : absolute;
    transform :  rotateX(90deg) translateZ(${parameters.height/2}px) translateY(${yTr}px) translateX(${-xTr}px) translateZ(${zTr}px);
    width : ${parameters.width}px;
    height : ${parameters.length}px;`;

    bottom.style = `
    position : absolute;
    transform :  rotateX(-90deg) translateZ(${parameters.height/2}px) translateY(-${yTr}px) translateX(${-xTr}px) translateZ(${-zTr}px);
    width : ${parameters.width}px;
    height : ${parameters.length}px;`;

    left.style = `
    position : absolute;
    transform : translateX(${parameters.width/2}px) rotateY(90deg) translateX(${-yTr}px) translateZ(${-(xTr)}px) translateY(${-zTr}px);
    width : ${parameters.length}px;
    height : ${parameters.height}px;`;

    right.style = `
   position : absolute;
   transform :  translateX(-${parameters.width/2}px) rotateY(-90deg) translateX(${yTr}px) translateZ(${xTr}px) translateY(${-zTr}px);
    width : ${parameters.length}px;
    height : ${parameters.height}px;`;

    front.style = `
   position : absolute;
   transform : translateZ(${parameters.length/2}px) translateZ(${yTr}px) translateX(${-xTr}px) translateY(${-zTr}px);
    width : ${parameters.width}px;
    height : ${parameters.height}px;`;

    back.style = `
   position : absolute;
   transform :  translateZ(-${parameters.length/2}px) translateZ(${yTr}px) translateX(${-xTr}px) translateY(${-zTr}px);
    width : ${parameters.width}px;
    height : ${parameters.height}px`;

      for(let i = 0; i < arr.length; i++){
      parent.appendChild(arr[i]);
      arr[i].style.border = '1px solid black';
      arr[i].classList.add('transformers');
      //div.style.background = '#21212661';
      };
    return arr;
  }

  map(_size_px, number, axis, starter = [0, 0, 0]) {
    let a = _size_px;
    let arr = [];
    if (axis === 'x') {
      for (let i = starter[0]; i < starter[0] + (a * number); i += a) {
        arr.push([a, [i, starter[1], starter[2]]]);
      }
    } else if (axis === 'y') {
      for (let i = starter[1]; i < starter[1] + (a * number); i += a) {
        arr.push([a, [starter[0], i, starter[2]]]);
      }
    } else if (axis === 'z') {
      for (let i = starter[2]; i < starter[2] + (a * number); i += a) {
        arr.push([a, [starter[0], starter[1], i]]);
      }
    } else if (axis === 'xy') {
      for (let i = starter[0]; i < starter[0] + (a * number); i += a) {
        for (let j = starter[1]; j < starter[1] + (a * number); j += a) {
          arr.push([a, [i, j, starter[2]]]);
        }
      }
    } else if (axis === 'yz') {
      for (let i = starter[1]; i < starter[1] + (a * number); i += a) {
        for (let j = starter[2]; j < starter[2] + (a * number); j += a) {
          arr.push([a, [starter[0], i, j]]);
        }
      }
    } else if (axis === 'xz') {
      for (let i = starter[0]; i < starter[0] + (a * number); i += a) {
        for (let j = starter[2]; j < starter[2] + (a * number); j += a) {
          arr.push([a, [i, starter[1], j]]);
        }
      }
    } else {
      for (let i = starter[0]; i < starter[0] + (a * number); i += a) {
        for (let j = starter[1]; j < starter[1] + (a * number); j += a) {
          for (let k = starter[2]; k < starter[2] + (a * number); k += a) {
            arr.push([a, [i, j, k]]);
          }
        }
      }
    }
    return arr;
  }

  compile(map, parent) {
    let arr = [];
    map.forEach((data) => {
      let arrays = this.cube(parent, {
        width: data[0],
        height: data[0],
        length: data[0],
        perspective: 800,
        translations: [data[1][0], data[1][1], data[1][2]]
      });
      arr.push(arrays);
    });
    return (arr);
  }


  style(compiledCubes, styles = { property: [], value: [] }) {
    for (let i = 0; i < compiledCubes.length; i++) {
      for (let j = 0; j < compiledCubes[i].length; j++) {

        for (let k = 0; k < styles.property.length; k++) {
          compiledCubes[i][j].style[styles.property[k]] = styles.value[k];
        }
      }
    }
  }
}